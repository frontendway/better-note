首次渲染性能提升点
  延迟数据的劫持，即访问才做拦截
  patch 过程如果 children 是文本则直接添加文本节点，不会再多 patch 一次

重新渲染性能提升点
  diff 算法对比由模板数量相关变为动态节点数量相关
  静态节点由之前的每次创建渲染变为函数外部的变量引入，只创建一次后面都是直接复用

__DEV__
  用来判断是否是开发环境的全局变量，在编译的时候替换，类似 webpack 的 definePlugin

JS 对象中的键长度限制
  MDN对这个问题保持沉默，但浏览器处理不一，大部分可处理 227 个字符串

Object.keys 对 proxy 对象依然返回原始 target 的 key 集合

JSON.stringify(value[, replacer[, space]])
  replacer:
    函数
      JSON.stringify 将调用该函数，并传入每个成员的 key 和 value，使用返回值而不是原始值。
      如果返回 undefined，则排除成员
      根对象的 key 是一个空字符串
    数组
      则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样

JSON.stringify(proxy) 则触发 handler(target, key, receiver) 的 key 为 toJSON
window.toString.call(proxy) 则触发 handler(target, key, receiver) 的 key 为 Symbol(Symbol.toStringTag)

var a = new Proxy({a: 1, b: {c: 1}}, {
  get (target, key, c) {
    // 1 4
    return target[key]
  },
  ownKeys (target) {
    // 3 
    return Reflect.ownKeys(target)
  }
})

var b = JSON.stringify(a, function (key, value) {
  // 2 5
  return value
})
b = '{"a":1,"b":{"c":1}}'

高阶函数
  一个函数就可以接收另一个函数作为参数
  例如
    map、reduce、sort 等
